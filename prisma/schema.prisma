generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Patient {
  patient_id     Int             @id @default(autoincrement())
  first_name     String
  last_name      String
  date_of_birth  DateTime
  contact_number String?
  email          String?         @unique
  address        String?
  condition_status String? 
  checkups       Checkup[]
  medicalRecords MedicalRecord[]
  prescriptions  Prescription[]
}


model Doctor {
  doctor_id      Int            @id @default(autoincrement())
  first_name     String
  last_name      String
  specialization String
  contact_number String?
  email          String?        @unique
  checkups       Checkup[]
  prescriptions  Prescription[]
}


model MedicalRecord {
  record_id      Int      @id @default(autoincrement())
  patient_id     Int
  disease_name   String
  diagnosis_date DateTime
  notes          String?
  status         String?
  patient        Patient  @relation(fields: [patient_id], references: [patient_id])
}


model Checkup {
  checkup_id       Int               @id @default(autoincrement())
  patient_id       Int
  doctor_id        Int
  checkup_type_id  Int
  checkup_date     DateTime
  notes            String?
  status           String?
  checkupType      CheckupType       @relation(fields: [checkup_type_id], references: [checkup_type_id])
  doctor           Doctor            @relation(fields: [doctor_id], references: [doctor_id])
  patient          Patient           @relation(fields: [patient_id], references: [patient_id])
  checkupDocuments CheckupDocument[]
}


model CheckupType {
  checkup_type_id Int       @id @default(autoincrement())
  type_name       String
  description     String?
  checkups        Checkup[]
}


model CheckupDocument {
  document_id Int      @id @default(autoincrement())
  checkup_id  Int
  file_name   String
  file_path   String
  file_type   String
  upload_date DateTime @default(now())
  checkup     Checkup  @relation(fields: [checkup_id], references: [checkup_id])
}


model Prescription {
  prescription_id         Int                      @id @default(autoincrement())
  patient_id              Int
  doctor_id               Int
  prescribed_date         DateTime
  valid_until             DateTime
  notes                   String?
  doctor                  Doctor                   @relation(fields: [doctor_id], references: [doctor_id])
  patient                 Patient                  @relation(fields: [patient_id], references: [patient_id])
  prescriptionMedications PrescriptionMedication[]
}


model Medication {
  medication_id           Int                      @id @default(autoincrement())
  name                    String
  description             String?
  manufacturer            String?
  prescriptionMedications PrescriptionMedication[]
}

  
model PrescriptionMedication {
  prescription_id Int
  medication_id   Int
  quantity        Int
  dosage          String
  frequency       String
  instructions    String?
  medication      Medication   @relation(fields: [medication_id], references: [medication_id])
  prescription    Prescription @relation(fields: [prescription_id], references: [prescription_id])

  @@id([prescription_id, medication_id])
}
